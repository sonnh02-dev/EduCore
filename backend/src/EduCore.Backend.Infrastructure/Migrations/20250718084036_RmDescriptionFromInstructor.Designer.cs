// <auto-generated />
using System;
using EduCore.BackEnd.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EduCore.BackEnd.Infrastructure.Migrations
{
    [DbContext(typeof(EduCoreDbContext))]
    [Migration("20250718084036_RmDescriptionFromInstructor")]
    partial class RmDescriptionFromInstructor
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EduCore.BackEnd.Domain.Entities.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Answers_Id");

                    b.HasIndex(new[] { "QuestionId" }, "IX_Answers_QuestionId");

                    b.ToTable("Answers", "exercise");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "HyperText Markup Language",
                            IsCorrect = true,
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 2,
                            Content = "Home Tool Markup Language",
                            IsCorrect = false,
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 3,
                            Content = "Hyperlink and Text Markup Language",
                            IsCorrect = false,
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 4,
                            Content = "HighText Machine Language",
                            IsCorrect = false,
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 5,
                            Content = "<p>",
                            IsCorrect = true,
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 6,
                            Content = "<div>",
                            IsCorrect = false,
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 7,
                            Content = "<span>",
                            IsCorrect = false,
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 8,
                            Content = "<h1>",
                            IsCorrect = false,
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 9,
                            Content = "<br>",
                            IsCorrect = true,
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 10,
                            Content = "<hr>",
                            IsCorrect = false,
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 11,
                            Content = "<div>",
                            IsCorrect = false,
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 12,
                            Content = "<h2>",
                            IsCorrect = false,
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 13,
                            Content = "<b>",
                            IsCorrect = true,
                            QuestionId = 4
                        },
                        new
                        {
                            Id = 14,
                            Content = "<i>",
                            IsCorrect = false,
                            QuestionId = 4
                        },
                        new
                        {
                            Id = 15,
                            Content = "<u>",
                            IsCorrect = false,
                            QuestionId = 4
                        },
                        new
                        {
                            Id = 16,
                            Content = "<em>",
                            IsCorrect = false,
                            QuestionId = 4
                        },
                        new
                        {
                            Id = 17,
                            Content = "Inner spacing inside the border",
                            IsCorrect = true,
                            QuestionId = 5
                        },
                        new
                        {
                            Id = 18,
                            Content = "Space outside the element",
                            IsCorrect = false,
                            QuestionId = 5
                        },
                        new
                        {
                            Id = 19,
                            Content = "Text decoration",
                            IsCorrect = false,
                            QuestionId = 5
                        },
                        new
                        {
                            Id = 20,
                            Content = "Font styling",
                            IsCorrect = false,
                            QuestionId = 5
                        },
                        new
                        {
                            Id = 21,
                            Content = "border-width",
                            IsCorrect = true,
                            QuestionId = 6
                        },
                        new
                        {
                            Id = 22,
                            Content = "margin",
                            IsCorrect = false,
                            QuestionId = 6
                        },
                        new
                        {
                            Id = 23,
                            Content = "padding",
                            IsCorrect = false,
                            QuestionId = 6
                        },
                        new
                        {
                            Id = 24,
                            Content = "outline",
                            IsCorrect = false,
                            QuestionId = 6
                        });
                });

            modelBuilder.Entity("EduCore.BackEnd.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PK_Categories_Id");

                    b.ToTable("Categories", "course");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Development"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Business"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Finance & Accounting"
                        },
                        new
                        {
                            Id = 4,
                            Name = "IT & Software"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Office Productivity"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Personal Development"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Design"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Marketing"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Lifestyle"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Photography & Video"
                        });
                });

            modelBuilder.Entity("EduCore.BackEnd.Domain.Entities.Certificate", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("CertificateUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseId")
                        .HasName("PK_Certificates_CourseId");

                    b.ToTable("Certificates", "certificate");

                    b.HasData(
                        new
                        {
                            CourseId = 1,
                            CertificateUrl = "https://example.com/cert/html",
                            Description = "Certificate for completing HTML & CSS Basics",
                            Title = "HTML & CSS Basics Certificate"
                        },
                        new
                        {
                            CourseId = 2,
                            CertificateUrl = "https://example.com/cert/js",
                            Description = "Certificate for mastering JavaScript core concepts",
                            Title = "JavaScript Essentials Certificate"
                        },
                        new
                        {
                            CourseId = 3,
                            CertificateUrl = "https://example.com/cert/react",
                            Description = "Certificate for learning React",
                            Title = "React for Beginners Certificate"
                        },
                        new
                        {
                            CourseId = 4,
                            CertificateUrl = "https://example.com/cert/css-flex",
                            Description = "Certificate for mastering CSS Flexbox",
                            Title = "Advanced CSS Flexbox Certificate"
                        },
                        new
                        {
                            CourseId = 5,
                            CertificateUrl = "https://example.com/cert/node",
                            Description = "Certificate for learning Node.js",
                            Title = "Node.js Fundamentals Certificate"
                        },
                        new
                        {
                            CourseId = 6,
                            CertificateUrl = "https://example.com/cert/mern",
                            Description = "Certificate for completing MERN stack project",
                            Title = "Fullstack MERN Project Certificate"
                        },
                        new
                        {
                            CourseId = 7,
                            CertificateUrl = "https://example.com/cert/tailwind",
                            Description = "Certificate for Tailwind CSS",
                            Title = "Tailwind CSS Crash Course Certificate"
                        },
                        new
                        {
                            CourseId = 8,
                            CertificateUrl = "https://example.com/cert/js-dsa",
                            Description = "Certificate for completing JS algorithms",
                            Title = "JavaScript Algorithms Certificate"
                        },
                        new
                        {
                            CourseId = 9,
                            CertificateUrl = "https://example.com/cert/nextjs",
                            Description = "Certificate for mastering Next.js",
                            Title = "Next.js from Scratch Certificate"
                        },
                        new
                        {
                            CourseId = 10,
                            CertificateUrl = "https://example.com/cert/ts",
                            Description = "Certificate for learning TypeScript",
                            Title = "TypeScript for Web Dev Certificate"
                        },
                        new
                        {
                            CourseId = 11,
                            CertificateUrl = "https://example.com/cert/ds",
                            Description = "Certificate for learning Data Science basics",
                            Title = "Intro to Data Science Certificate"
                        },
                        new
                        {
                            CourseId = 12,
                            CertificateUrl = "https://example.com/cert/python-data",
                            Description = "Certificate for pandas and numpy",
                            Title = "Python for Data Analysis Certificate"
                        },
                        new
                        {
                            CourseId = 13,
                            CertificateUrl = "https://example.com/cert/android",
                            Description = "Certificate for Android development",
                            Title = "Android Development Certificate"
                        },
                        new
                        {
                            CourseId = 14,
                            CertificateUrl = "https://example.com/cert/swiftui",
                            Description = "Certificate for iOS development",
                            Title = "iOS SwiftUI Basics Certificate"
                        },
                        new
                        {
                            CourseId = 15,
                            CertificateUrl = "https://example.com/cert/unity",
                            Description = "Certificate for Unity game development",
                            Title = "Unity Game Dev Certificate"
                        },
                        new
                        {
                            CourseId = 16,
                            CertificateUrl = "https://example.com/cert/unreal",
                            Description = "Certificate for Unreal Engine development",
                            Title = "Unreal Engine Essentials Certificate"
                        },
                        new
                        {
                            CourseId = 17,
                            CertificateUrl = "https://example.com/cert/csharp",
                            Description = "Certificate for C# basics",
                            Title = "C# for Beginners Certificate"
                        },
                        new
                        {
                            CourseId = 18,
                            CertificateUrl = "https://example.com/cert/java",
                            Description = "Certificate for Java programming",
                            Title = "Java Programming Certificate"
                        },
                        new
                        {
                            CourseId = 19,
                            CertificateUrl = "https://example.com/cert/php",
                            Description = "Certificate for PHP web development",
                            Title = "PHP & MySQL Web App Certificate"
                        },
                        new
                        {
                            CourseId = 20,
                            CertificateUrl = "https://example.com/cert/kotlin",
                            Description = "Certificate for Kotlin Android development",
                            Title = "Kotlin for Android Certificate"
                        });
                });

            modelBuilder.Entity("EduCore.BackEnd.Domain.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleterId")
                        .HasColumnType("int");

                    b.Property<int>("LectureId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifierId")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfLikes")
                        .HasColumnType("int");

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id")
                        .HasName("PK_Comments_Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex(new[] { "LectureId", "ParentCommentId", "CreatedAt", "CreatorId" }, "IX_Comments_LectureId_ParentCommentId_CreatedAt_ProfileId");

                    b.ToTable("Comments", "review");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Great explanation on HTML basics!",
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 141, DateTimeKind.Utc).AddTicks(1932),
                            CreatorId = 2,
                            LectureId = 1,
                            NumberOfLikes = 3,
                            RowVersion = new byte[] { 0 }
                        },
                        new
                        {
                            Id = 2,
                            Content = "This was really helpful, thanks!",
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 141, DateTimeKind.Utc).AddTicks(1936),
                            CreatorId = 3,
                            LectureId = 1,
                            NumberOfLikes = 5,
                            RowVersion = new byte[] { 0 }
                        },
                        new
                        {
                            Id = 3,
                            Content = "Can you explain more about DOCTYPE?",
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 141, DateTimeKind.Utc).AddTicks(1937),
                            CreatorId = 4,
                            LectureId = 1,
                            NumberOfLikes = 1,
                            RowVersion = new byte[] { 0 }
                        },
                        new
                        {
                            Id = 4,
                            Content = "Loved the video example!",
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 141, DateTimeKind.Utc).AddTicks(1938),
                            CreatorId = 5,
                            LectureId = 1,
                            NumberOfLikes = 4,
                            RowVersion = new byte[] { 0 }
                        },
                        new
                        {
                            Id = 7,
                            Content = "I'm learning a lot from this lecture!",
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 141, DateTimeKind.Utc).AddTicks(1939),
                            CreatorId = 2,
                            LectureId = 1,
                            NumberOfLikes = 6,
                            RowVersion = new byte[] { 0 }
                        },
                        new
                        {
                            Id = 8,
                            Content = "Is there a cheat sheet for HTML tags?",
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 141, DateTimeKind.Utc).AddTicks(1940),
                            CreatorId = 3,
                            LectureId = 1,
                            NumberOfLikes = 2,
                            RowVersion = new byte[] { 0 }
                        },
                        new
                        {
                            Id = 5,
                            Content = "Sure, DOCTYPE tells the browser which HTML version you're using.",
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 141, DateTimeKind.Utc).AddTicks(1942),
                            CreatorId = 3,
                            LectureId = 1,
                            NumberOfLikes = 2,
                            ParentCommentId = 3,
                            RowVersion = new byte[] { 0 }
                        },
                        new
                        {
                            Id = 6,
                            Content = "Agreed, video really helped.",
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 141, DateTimeKind.Utc).AddTicks(1943),
                            CreatorId = 2,
                            LectureId = 1,
                            NumberOfLikes = 1,
                            ParentCommentId = 4,
                            RowVersion = new byte[] { 0 }
                        },
                        new
                        {
                            Id = 9,
                            Content = "You can find many online. W3Schools is great!",
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 141, DateTimeKind.Utc).AddTicks(1944),
                            CreatorId = 4,
                            LectureId = 1,
                            NumberOfLikes = 3,
                            ParentCommentId = 8,
                            RowVersion = new byte[] { 0 }
                        },
                        new
                        {
                            Id = 10,
                            Content = "Thanks for the tip!",
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 141, DateTimeKind.Utc).AddTicks(1946),
                            CreatorId = 5,
                            LectureId = 1,
                            NumberOfLikes = 1,
                            ParentCommentId = 9,
                            RowVersion = new byte[] { 0 }
                        });
                });

            modelBuilder.Entity("EduCore.BackEnd.Domain.Entities.ContentBlock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("LectureId")
                        .HasColumnType("int");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id")
                        .HasName("PK_ContentBlocks_Id");

                    b.HasIndex(new[] { "LectureId" }, "IX_ContentBlocks_LectureId");

                    b.ToTable("ContentBlocks", "course");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "HTML stands for HyperText Markup Language...",
                            ContentType = "Text",
                            LectureId = 1,
                            Position = 1,
                            Title = "HTML Overview"
                        },
                        new
                        {
                            Id = 2,
                            Content = "https://www.youtube.com/embed/html_intro",
                            ContentType = "Video",
                            LectureId = 1,
                            Position = 2,
                            Title = "Intro Video"
                        },
                        new
                        {
                            Id = 3,
                            Content = "<p>Hello World</p>",
                            ContentType = "Text",
                            LectureId = 2,
                            Position = 1,
                            Title = "Tag Examples"
                        },
                        new
                        {
                            Id = 4,
                            ContentType = "Image",
                            ImageUrl = "https://example.com/images/html-tags.png",
                            LectureId = 2,
                            Position = 2,
                            Title = "HTML Tags Image"
                        },
                        new
                        {
                            Id = 5,
                            Content = "Selectors let you target elements...",
                            ContentType = "Text",
                            LectureId = 3,
                            Position = 1,
                            Title = "Using Selectors"
                        },
                        new
                        {
                            Id = 6,
                            Content = "JS has different data types such as string, number...",
                            ContentType = "Text",
                            LectureId = 5,
                            Position = 1,
                            Title = "Data Types"
                        });
                });

            modelBuilder.Entity("EduCore.BackEnd.Domain.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleterId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("InstructorProfileId")
                        .HasColumnType("int");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifierId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal?>("Rating")
                        .HasColumnType("decimal(2, 1)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Url")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("URL");

                    b.HasKey("Id")
                        .HasName("PK_Courses_Id");

                    b.HasIndex(new[] { "InstructorProfileId", "SubCategoryId" }, "IX_Courses_InstructorProfileId_SubCategoryId");

                    b.HasIndex(new[] { "SubCategoryId" }, "IX_Courses_SubCategoryId");

                    b.ToTable("Courses", "course");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 142, DateTimeKind.Utc).AddTicks(5065),
                            Description = "Learn the fundamentals of web development",
                            Duration = "4h",
                            InstructorProfileId = 2,
                            Level = "Beginner",
                            Price = 49.99m,
                            Rating = 4.5m,
                            RowVersion = new byte[] { 0 },
                            SubCategoryId = 1,
                            Title = "HTML & CSS Basics",
                            Url = "https://example.com/html"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 142, DateTimeKind.Utc).AddTicks(5073),
                            Description = "Master JavaScript core concepts",
                            Duration = "6h",
                            InstructorProfileId = 2,
                            Level = "Intermediate",
                            Price = 59.99m,
                            Rating = 4.6m,
                            RowVersion = new byte[] { 0 },
                            SubCategoryId = 1,
                            Title = "JavaScript Essentials",
                            Url = "https://example.com/js"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 142, DateTimeKind.Utc).AddTicks(5076),
                            Description = "Build modern web apps with React",
                            Duration = "5h",
                            InstructorProfileId = 3,
                            Level = "Beginner",
                            Price = 69.99m,
                            Rating = 4.7m,
                            RowVersion = new byte[] { 0 },
                            SubCategoryId = 1,
                            Title = "React for Beginners",
                            Url = "https://example.com/react"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 142, DateTimeKind.Utc).AddTicks(5079),
                            Description = "Create flexible layouts with CSS",
                            Duration = "3h",
                            InstructorProfileId = 4,
                            Level = "Advanced",
                            Price = 39.99m,
                            Rating = 4.8m,
                            RowVersion = new byte[] { 0 },
                            SubCategoryId = 1,
                            Title = "Advanced CSS Flexbox",
                            Url = "https://example.com/css-flex"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 142, DateTimeKind.Utc).AddTicks(5081),
                            Description = "Backend JavaScript with Node.js",
                            Duration = "5.5h",
                            InstructorProfileId = 5,
                            Level = "Intermediate",
                            Price = 54.99m,
                            Rating = 4.4m,
                            RowVersion = new byte[] { 0 },
                            SubCategoryId = 1,
                            Title = "Node.js Fundamentals",
                            Url = "https://example.com/node"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 142, DateTimeKind.Utc).AddTicks(5083),
                            Description = "Build a complete MERN stack app",
                            Duration = "8h",
                            InstructorProfileId = 2,
                            Level = "Advanced",
                            Price = 89.99m,
                            Rating = 4.9m,
                            RowVersion = new byte[] { 0 },
                            SubCategoryId = 1,
                            Title = "Fullstack Project: MERN",
                            Url = "https://example.com/mern"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 142, DateTimeKind.Utc).AddTicks(5086),
                            Description = "Style modern UI with Tailwind",
                            Duration = "2h",
                            InstructorProfileId = 4,
                            Level = "Beginner",
                            Price = 29.99m,
                            Rating = 4.3m,
                            RowVersion = new byte[] { 0 },
                            SubCategoryId = 1,
                            Title = "Tailwind CSS Crash Course",
                            Url = "https://example.com/tailwind"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 142, DateTimeKind.Utc).AddTicks(5089),
                            Description = "Master DSA in JS",
                            Duration = "6h",
                            InstructorProfileId = 3,
                            Level = "Advanced",
                            Price = 64.99m,
                            Rating = 4.7m,
                            RowVersion = new byte[] { 0 },
                            SubCategoryId = 1,
                            Title = "JavaScript Algorithms",
                            Url = "https://example.com/js-dsa"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 142, DateTimeKind.Utc).AddTicks(5091),
                            Description = "Learn SSR with Next.js",
                            Duration = "5h",
                            InstructorProfileId = 5,
                            Level = "Intermediate",
                            Price = 74.99m,
                            Rating = 4.5m,
                            RowVersion = new byte[] { 0 },
                            SubCategoryId = 1,
                            Title = "Next.js from Scratch",
                            Url = "https://example.com/nextjs"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 142, DateTimeKind.Utc).AddTicks(5093),
                            Description = "Use TS to build reliable apps",
                            Duration = "4.5h",
                            InstructorProfileId = 2,
                            Level = "Intermediate",
                            Price = 59.99m,
                            Rating = 4.6m,
                            RowVersion = new byte[] { 0 },
                            SubCategoryId = 1,
                            Title = "TypeScript for Web Dev",
                            Url = "https://example.com/ts"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 142, DateTimeKind.Utc).AddTicks(5096),
                            Description = "Data science basics",
                            Duration = "3h",
                            InstructorProfileId = 2,
                            Level = "Beginner",
                            Price = 49.99m,
                            Rating = 4.5m,
                            RowVersion = new byte[] { 0 },
                            SubCategoryId = 2,
                            Title = "Intro to Data Science",
                            Url = "https://example.com/ds"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 142, DateTimeKind.Utc).AddTicks(5098),
                            Description = "Use pandas and numpy",
                            Duration = "6h",
                            InstructorProfileId = 2,
                            Level = "Intermediate",
                            Price = 59.99m,
                            Rating = 4.6m,
                            RowVersion = new byte[] { 0 },
                            SubCategoryId = 2,
                            Title = "Python for Data Analysis",
                            Url = "https://example.com/python-data"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 142, DateTimeKind.Utc).AddTicks(5101),
                            Description = "Build Android apps",
                            Duration = "5h",
                            InstructorProfileId = 3,
                            Level = "Beginner",
                            Price = 69.99m,
                            Rating = 4.7m,
                            RowVersion = new byte[] { 0 },
                            SubCategoryId = 3,
                            Title = "Android Development",
                            Url = "https://example.com/android"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 142, DateTimeKind.Utc).AddTicks(5104),
                            Description = "Start with iOS dev",
                            Duration = "4h",
                            InstructorProfileId = 4,
                            Level = "Beginner",
                            Price = 79.99m,
                            Rating = 4.6m,
                            RowVersion = new byte[] { 0 },
                            SubCategoryId = 3,
                            Title = "iOS SwiftUI Basics",
                            Url = "https://example.com/swiftui"
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 142, DateTimeKind.Utc).AddTicks(5106),
                            Description = "Create 2D games",
                            Duration = "6h",
                            InstructorProfileId = 5,
                            Level = "Intermediate",
                            Price = 84.99m,
                            Rating = 4.5m,
                            RowVersion = new byte[] { 0 },
                            SubCategoryId = 4,
                            Title = "Unity Game Dev",
                            Url = "https://example.com/unity"
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 142, DateTimeKind.Utc).AddTicks(5109),
                            Description = "3D game dev with UE",
                            Duration = "7h",
                            InstructorProfileId = 2,
                            Level = "Advanced",
                            Price = 89.99m,
                            Rating = 4.7m,
                            RowVersion = new byte[] { 0 },
                            SubCategoryId = 4,
                            Title = "Unreal Engine Essentials",
                            Url = "https://example.com/unreal"
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 142, DateTimeKind.Utc).AddTicks(5161),
                            Description = "Learn C# basics",
                            Duration = "4h",
                            InstructorProfileId = 4,
                            Level = "Beginner",
                            Price = 44.99m,
                            Rating = 4.4m,
                            RowVersion = new byte[] { 0 },
                            SubCategoryId = 5,
                            Title = "C# for Beginners",
                            Url = "https://example.com/csharp"
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 142, DateTimeKind.Utc).AddTicks(5163),
                            Description = "Core Java concepts",
                            Duration = "5h",
                            InstructorProfileId = 3,
                            Level = "Intermediate",
                            Price = 54.99m,
                            Rating = 4.6m,
                            RowVersion = new byte[] { 0 },
                            SubCategoryId = 5,
                            Title = "Java Programming",
                            Url = "https://example.com/java"
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 142, DateTimeKind.Utc).AddTicks(5165),
                            Description = "Dynamic websites with PHP",
                            Duration = "6h",
                            InstructorProfileId = 5,
                            Level = "Intermediate",
                            Price = 59.99m,
                            Rating = 4.3m,
                            RowVersion = new byte[] { 0 },
                            SubCategoryId = 3,
                            Title = "PHP & MySQL Web App",
                            Url = "https://example.com/php"
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 142, DateTimeKind.Utc).AddTicks(5169),
                            Description = "Modern Android dev",
                            Duration = "5h",
                            InstructorProfileId = 2,
                            Level = "Intermediate",
                            Price = 64.99m,
                            Rating = 4.5m,
                            RowVersion = new byte[] { 0 },
                            SubCategoryId = 3,
                            Title = "Kotlin for Android",
                            Url = "https://example.com/kotlin"
                        });
                });

            modelBuilder.Entity("EduCore.BackEnd.Domain.Entities.Enrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifierId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StudentProfileId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Enrollments_EnrollmentId");

                    b.HasIndex(new[] { "CourseId" }, "IX_Enrollments_CourseId");

                    b.HasIndex(new[] { "StudentProfileId" }, "IX_Enrollments_StudentProfileId");

                    b.HasIndex(new[] { "StudentProfileId", "CourseId" }, "IX_Enrollments_StudentProfileId_CourseId")
                        .IsUnique();

                    b.ToTable("Enrollments", "enrollment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 143, DateTimeKind.Utc).AddTicks(1988),
                            CreatorId = 6,
                            RowVersion = new byte[] { 0 },
                            Status = 0,
                            StudentProfileId = 6
                        },
                        new
                        {
                            Id = 2,
                            CompletedAt = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CourseId = 3,
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 143, DateTimeKind.Utc).AddTicks(1995),
                            CreatorId = 6,
                            RowVersion = new byte[] { 0 },
                            Status = 2,
                            StudentProfileId = 6
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 2,
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 143, DateTimeKind.Utc).AddTicks(2001),
                            CreatorId = 6,
                            RowVersion = new byte[] { 0 },
                            Status = 5,
                            StudentProfileId = 6
                        },
                        new
                        {
                            Id = 4,
                            CourseId = 11,
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 143, DateTimeKind.Utc).AddTicks(2004),
                            CreatorId = 6,
                            RowVersion = new byte[] { 0 },
                            Status = 0,
                            StudentProfileId = 6
                        },
                        new
                        {
                            Id = 5,
                            CompletedAt = new DateTime(2024, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CourseId = 3,
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 143, DateTimeKind.Utc).AddTicks(2005),
                            CreatorId = 7,
                            RowVersion = new byte[] { 0 },
                            Status = 2,
                            StudentProfileId = 7
                        },
                        new
                        {
                            Id = 6,
                            CompletedAt = new DateTime(2024, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CourseId = 3,
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 143, DateTimeKind.Utc).AddTicks(2007),
                            CreatorId = 8,
                            RowVersion = new byte[] { 0 },
                            Status = 2,
                            StudentProfileId = 8
                        },
                        new
                        {
                            Id = 7,
                            CompletedAt = new DateTime(2024, 7, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CourseId = 3,
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 143, DateTimeKind.Utc).AddTicks(2008),
                            CreatorId = 9,
                            RowVersion = new byte[] { 0 },
                            Status = 2,
                            StudentProfileId = 9
                        },
                        new
                        {
                            Id = 8,
                            CourseId = 18,
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 143, DateTimeKind.Utc).AddTicks(2010),
                            CreatorId = 10,
                            RowVersion = new byte[] { 0 },
                            Status = 5,
                            StudentProfileId = 10
                        },
                        new
                        {
                            Id = 9,
                            CompletedAt = new DateTime(2024, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CourseId = 3,
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 143, DateTimeKind.Utc).AddTicks(2011),
                            CreatorId = 10,
                            RowVersion = new byte[] { 0 },
                            Status = 2,
                            StudentProfileId = 10
                        });
                });

            modelBuilder.Entity("EduCore.BackEnd.Domain.Entities.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExerciseUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("LectureId")
                        .HasColumnType("int");

                    b.Property<float>("MaxScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(10f);

                    b.Property<float>("WeightPercentage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.HasKey("Id")
                        .HasName("PK_Exercises_Id");

                    b.HasIndex(new[] { "LectureId", "Discriminator" }, "IX_Exercises_LectureId_Discriminator");

                    b.ToTable("Exercises", "exercise");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Exercise");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("EduCore.BackEnd.Domain.Entities.Lecture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<bool>("IsPreview")
                        .HasColumnType("bit");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<string>("ResourceUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.Property<float>("WeightPercentage")
                        .HasColumnType("real");

                    b.HasKey("Id")
                        .HasName("PK_Lectures_Id");

                    b.HasIndex(new[] { "SectionId" }, "IX_Lectures_SectionId");

                    b.ToTable("Lectures", "course");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Duration = new TimeSpan(0, 0, 15, 0, 0),
                            IsPreview = true,
                            Position = 1,
                            SectionId = 1,
                            Title = "What is HTML?",
                            ViewCount = 200,
                            WeightPercentage = 50f
                        },
                        new
                        {
                            Id = 2,
                            Duration = new TimeSpan(0, 0, 15, 0, 0),
                            IsPreview = false,
                            Position = 2,
                            SectionId = 1,
                            Title = "Basic Tags",
                            ViewCount = 150,
                            WeightPercentage = 50f
                        },
                        new
                        {
                            Id = 3,
                            Duration = new TimeSpan(0, 0, 30, 0, 0),
                            IsPreview = false,
                            Position = 1,
                            SectionId = 2,
                            Title = "CSS Selectors",
                            ViewCount = 180,
                            WeightPercentage = 50f
                        },
                        new
                        {
                            Id = 4,
                            Duration = new TimeSpan(0, 0, 30, 0, 0),
                            IsPreview = false,
                            Position = 2,
                            SectionId = 2,
                            Title = "CSS Box Model",
                            ViewCount = 160,
                            WeightPercentage = 50f
                        },
                        new
                        {
                            Id = 5,
                            Duration = new TimeSpan(0, 0, 22, 0, 0),
                            IsPreview = false,
                            Position = 1,
                            SectionId = 3,
                            Title = "Variables and Data Types",
                            ViewCount = 210,
                            WeightPercentage = 50f
                        },
                        new
                        {
                            Id = 6,
                            Duration = new TimeSpan(0, 0, 23, 0, 0),
                            IsPreview = false,
                            Position = 2,
                            SectionId = 3,
                            Title = "Control Flow",
                            ViewCount = 190,
                            WeightPercentage = 50f
                        },
                        new
                        {
                            Id = 7,
                            Duration = new TimeSpan(0, 0, 25, 0, 0),
                            IsPreview = false,
                            Position = 1,
                            SectionId = 4,
                            Title = "Functions Basics",
                            ViewCount = 170,
                            WeightPercentage = 50f
                        },
                        new
                        {
                            Id = 8,
                            Duration = new TimeSpan(0, 0, 20, 0, 0),
                            IsPreview = false,
                            Position = 2,
                            SectionId = 4,
                            Title = "Arrow Functions",
                            ViewCount = 165,
                            WeightPercentage = 50f
                        });
                });

            modelBuilder.Entity("EduCore.BackEnd.Domain.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleterId")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifierId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK_Payments_Id");

                    b.ToTable("Payments", "payment");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Payment");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("EduCore.BackEnd.Domain.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Questions_Id");

                    b.HasIndex(new[] { "QuizId" }, "IX_Questions_QuizId");

                    b.ToTable("Questions", "exercise");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "What does HTML stand for?",
                            QuizId = 1
                        },
                        new
                        {
                            Id = 2,
                            Content = "What tag is used for a paragraph?",
                            QuizId = 1
                        },
                        new
                        {
                            Id = 3,
                            Content = "Which HTML tag creates a line break?",
                            QuizId = 4
                        },
                        new
                        {
                            Id = 4,
                            Content = "Which tag makes text bold?",
                            QuizId = 4
                        },
                        new
                        {
                            Id = 5,
                            Content = "What does the padding property affect in the box model?",
                            QuizId = 7
                        },
                        new
                        {
                            Id = 6,
                            Content = "Which CSS property sets the border size?",
                            QuizId = 7
                        });
                });

            modelBuilder.Entity("EduCore.BackEnd.Domain.Entities.Review", b =>
                {
                    b.Property<int>("EnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifierId")
                        .HasColumnType("int");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(2, 1)");

                    b.Property<int?>("ReOpen")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("EnrollmentId")
                        .HasName("PK_Reviews_EnrollmentId");

                    b.ToTable("Reviews", "review");

                    b.HasData(
                        new
                        {
                            EnrollmentId = 2,
                            Content = "Khóa học rất hữu ích!",
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 147, DateTimeKind.Utc).AddTicks(2099),
                            Rating = 4.5m,
                            RowVersion = new byte[] { 0 }
                        },
                        new
                        {
                            EnrollmentId = 5,
                            Content = "Giáo viên giảng dễ hiểu.",
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 147, DateTimeKind.Utc).AddTicks(2105),
                            Rating = 4.0m,
                            RowVersion = new byte[] { 0 }
                        },
                        new
                        {
                            EnrollmentId = 6,
                            Content = "Nội dung hơi ngắn, nhưng vẫn ổn.",
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 147, DateTimeKind.Utc).AddTicks(2166),
                            Rating = 3.5m,
                            RowVersion = new byte[] { 0 }
                        },
                        new
                        {
                            EnrollmentId = 7,
                            Content = "Xuất sắc! Học được rất nhiều.",
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 147, DateTimeKind.Utc).AddTicks(2168),
                            Rating = 5.0m,
                            RowVersion = new byte[] { 0 }
                        },
                        new
                        {
                            EnrollmentId = 9,
                            Content = "Tài liệu đầy đủ và chi tiết.",
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 147, DateTimeKind.Utc).AddTicks(2170),
                            Rating = 4.8m,
                            RowVersion = new byte[] { 0 }
                        });
                });

            modelBuilder.Entity("EduCore.BackEnd.Domain.Entities.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("DiscountPercent")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id")
                        .HasName("PK_Sales_Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Sale", "course");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            DiscountPercent = 40,
                            EndDate = new DateTime(2025, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 2,
                            DiscountPercent = 40,
                            EndDate = new DateTime(2025, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 3,
                            DiscountPercent = 40,
                            EndDate = new DateTime(2025, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CourseId = 4,
                            DiscountPercent = 40,
                            EndDate = new DateTime(2025, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            CourseId = 5,
                            DiscountPercent = 40,
                            EndDate = new DateTime(2025, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            CourseId = 6,
                            DiscountPercent = 40,
                            EndDate = new DateTime(2025, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            CourseId = 7,
                            DiscountPercent = 40,
                            EndDate = new DateTime(2025, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            CourseId = 8,
                            DiscountPercent = 40,
                            EndDate = new DateTime(2025, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            CourseId = 9,
                            DiscountPercent = 40,
                            EndDate = new DateTime(2025, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            CourseId = 10,
                            DiscountPercent = 40,
                            EndDate = new DateTime(2025, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11,
                            CourseId = 11,
                            DiscountPercent = 40,
                            EndDate = new DateTime(2025, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12,
                            CourseId = 12,
                            DiscountPercent = 40,
                            EndDate = new DateTime(2025, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 13,
                            CourseId = 13,
                            DiscountPercent = 40,
                            EndDate = new DateTime(2025, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 14,
                            CourseId = 14,
                            DiscountPercent = 40,
                            EndDate = new DateTime(2025, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 15,
                            CourseId = 15,
                            DiscountPercent = 40,
                            EndDate = new DateTime(2025, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 16,
                            CourseId = 16,
                            DiscountPercent = 40,
                            EndDate = new DateTime(2025, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 17,
                            CourseId = 17,
                            DiscountPercent = 40,
                            EndDate = new DateTime(2025, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 18,
                            CourseId = 18,
                            DiscountPercent = 40,
                            EndDate = new DateTime(2025, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 19,
                            CourseId = 19,
                            DiscountPercent = 40,
                            EndDate = new DateTime(2025, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 20,
                            CourseId = 20,
                            DiscountPercent = 40,
                            EndDate = new DateTime(2025, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 21,
                            CourseId = 1,
                            DiscountPercent = 25,
                            EndDate = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 22,
                            CourseId = 2,
                            DiscountPercent = 25,
                            EndDate = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("EduCore.BackEnd.Domain.Entities.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<float>("WeightPercentage")
                        .HasColumnType("real");

                    b.HasKey("Id")
                        .HasName("PK_Sections_Id");

                    b.HasIndex(new[] { "CourseId" }, "IX_Sections_CourseID");

                    b.ToTable("Sections", "course");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            Duration = new TimeSpan(0, 0, 30, 0, 0),
                            Position = 1,
                            Title = "Introduction to HTML",
                            WeightPercentage = 30f
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 1,
                            Duration = new TimeSpan(0, 1, 0, 0, 0),
                            Position = 2,
                            Title = "Styling with CSS",
                            WeightPercentage = 70f
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 2,
                            Duration = new TimeSpan(0, 0, 45, 0, 0),
                            Position = 1,
                            Title = "JS Basics",
                            WeightPercentage = 50f
                        },
                        new
                        {
                            Id = 4,
                            CourseId = 2,
                            Duration = new TimeSpan(0, 0, 45, 0, 0),
                            Position = 2,
                            Title = "JS Functions",
                            WeightPercentage = 50f
                        });
                });

            modelBuilder.Entity("EduCore.BackEnd.Domain.Entities.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("NotificationsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Settings_Id");

                    b.HasIndex(new[] { "UserProfileId" }, "IX_Settings_UserProfileId");

                    b.ToTable("Settings", "user");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Language = "en",
                            NotificationsEnabled = true,
                            Theme = "Light",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 2,
                            Language = "vi",
                            NotificationsEnabled = true,
                            Theme = "Dark",
                            UserProfileId = 2
                        },
                        new
                        {
                            Id = 3,
                            Language = "en",
                            NotificationsEnabled = false,
                            Theme = "Light",
                            UserProfileId = 3
                        },
                        new
                        {
                            Id = 4,
                            Language = "vi",
                            NotificationsEnabled = true,
                            Theme = "Dark",
                            UserProfileId = 4
                        },
                        new
                        {
                            Id = 5,
                            Language = "en",
                            NotificationsEnabled = true,
                            Theme = "Light",
                            UserProfileId = 5
                        },
                        new
                        {
                            Id = 6,
                            Language = "vi",
                            NotificationsEnabled = false,
                            Theme = "Dark",
                            UserProfileId = 6
                        },
                        new
                        {
                            Id = 7,
                            Language = "en",
                            NotificationsEnabled = true,
                            Theme = "Light",
                            UserProfileId = 7
                        },
                        new
                        {
                            Id = 8,
                            Language = "vi",
                            NotificationsEnabled = true,
                            Theme = "Dark",
                            UserProfileId = 8
                        },
                        new
                        {
                            Id = 9,
                            Language = "en",
                            NotificationsEnabled = false,
                            Theme = "Light",
                            UserProfileId = 9
                        },
                        new
                        {
                            Id = 10,
                            Language = "vi",
                            NotificationsEnabled = true,
                            Theme = "Dark",
                            UserProfileId = 10
                        });
                });

            modelBuilder.Entity("EduCore.BackEnd.Domain.Entities.Student", b =>
                {
                    b.Property<int>("UserProfileId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleterId")
                        .HasColumnType("int");

                    b.Property<string>("EducationLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Interests")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifierId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("UserProfileId")
                        .HasName("PK_Students_UserProfileId");

                    b.ToTable("Students", "user");

                    b.HasData(
                        new
                        {
                            UserProfileId = 6,
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 150, DateTimeKind.Utc).AddTicks(2611),
                            CreatorId = 0,
                            EducationLevel = "Undergraduate",
                            Interests = "Frontend development, graphic design, and responsive web design.",
                            RowVersion = new byte[] { 0 }
                        },
                        new
                        {
                            UserProfileId = 7,
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 150, DateTimeKind.Utc).AddTicks(2616),
                            CreatorId = 0,
                            EducationLevel = "Graduate",
                            Interests = "Database systems, data warehousing, and performance optimization techniques.",
                            RowVersion = new byte[] { 0 }
                        },
                        new
                        {
                            UserProfileId = 8,
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 150, DateTimeKind.Utc).AddTicks(2617),
                            CreatorId = 0,
                            EducationLevel = "PhD",
                            Interests = "Artificial Intelligence, deep learning, and ethical AI in education.",
                            RowVersion = new byte[] { 0 }
                        },
                        new
                        {
                            UserProfileId = 9,
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 150, DateTimeKind.Utc).AddTicks(2618),
                            CreatorId = 0,
                            EducationLevel = "High School",
                            Interests = "Mobile apps, cross-platform development, and game mechanics.",
                            RowVersion = new byte[] { 0 }
                        },
                        new
                        {
                            UserProfileId = 10,
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 150, DateTimeKind.Utc).AddTicks(2619),
                            CreatorId = 0,
                            EducationLevel = "College",
                            Interests = "Cybersecurity, ethical hacking, and network architecture.",
                            RowVersion = new byte[] { 0 }
                        });
                });

            modelBuilder.Entity("EduCore.BackEnd.Domain.Entities.StudentCourse", b =>
                {
                    b.Property<int>("StudentProfileId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("StudentProfileId", "CourseId")
                        .HasName("PK_StudentCourses_StudentProfileId_CourseId");

                    b.HasIndex(new[] { "CourseId" }, "IX_StudentCourses_CourseId");

                    b.HasIndex(new[] { "StudentProfileId" }, "IX_StudentCourses_StudentProfileId");

                    b.ToTable("StudentCourses", "enrollment");
                });

            modelBuilder.Entity("EduCore.BackEnd.Domain.Entities.SubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK_SubCategories_Id");

                    b.HasIndex(new[] { "CategoryId" }, "IX_SubCategories_CategoryId");

                    b.ToTable("SubCategories", "course");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Name = "Web Development"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Name = "Data Science"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Name = "Mobile Development"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            Name = "Game Development"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            Name = "Programming Languages"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 1,
                            Name = "Database Design"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 1,
                            Name = "Software Testing"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 1,
                            Name = "DevOps"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 1,
                            Name = "Cloud Computing"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 1,
                            Name = "Cyber Security"
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 2,
                            Name = "Entrepreneurship"
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 3,
                            Name = "Accounting"
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 4,
                            Name = "Network & Security"
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 5,
                            Name = "Microsoft Office"
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 6,
                            Name = "Productivity Hacks"
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 7,
                            Name = "UX/UI Design"
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 8,
                            Name = "Social Media Marketing"
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 10,
                            Name = "Video Production"
                        });
                });

            modelBuilder.Entity("EduCore.BackEnd.Domain.Entities.Submission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<string>("Feedback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsResubmitted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ResubmittedAt")
                        .HasColumnType("datetime2");

                    b.Property<float?>("Score")
                        .IsRequired()
                        .HasColumnType("real");

                    b.Property<int>("StudentProfileId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK_Submissions_Id");

                    b.HasIndex("StudentProfileId");

                    b.HasIndex(new[] { "ExerciseId", "StudentProfileId" }, "IX_Submissions_ExerciseId_StudentProfileId");

                    b.ToTable("Submissions", "exercise");
                });

            modelBuilder.Entity("EduCore.BackEnd.Domain.Entities.UserProfile", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId")
                        .HasName("PK_UserProfiles_UserId");

                    b.ToTable("UserProfiles", "user");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Address = "System HQ",
                            Bio = "Platform administrator with full access rights.",
                            FullName = "Admin User",
                            ImageUrl = "https://example.com/images/admin.jpg"
                        },
                        new
                        {
                            UserId = 2,
                            Address = "123 Instructor Ave",
                            Bio = "Instructor in web development and design.",
                            FullName = "John Smith",
                            ImageUrl = "https://example.com/images/instructor1.jpg"
                        },
                        new
                        {
                            UserId = 3,
                            Address = "456 Teaching Blvd",
                            Bio = "Experienced instructor in data science and AI.",
                            FullName = "Jane Doe",
                            ImageUrl = "https://example.com/images/instructor2.jpg"
                        },
                        new
                        {
                            UserId = 4,
                            Address = "789 Mentor Street",
                            Bio = "Instructor focused on backend technologies.",
                            FullName = "Michael Brown",
                            ImageUrl = "https://example.com/images/instructor3.jpg"
                        },
                        new
                        {
                            UserId = 5,
                            Address = "1010 Code Lane",
                            Bio = "DevOps engineer and cloud solutions instructor.",
                            FullName = "Emily Johnson",
                            ImageUrl = "https://example.com/images/instructor4.jpg"
                        },
                        new
                        {
                            UserId = 6,
                            Address = "202 Student Road",
                            Bio = "Student learning full-stack web development.",
                            FullName = "Alex Nguyen",
                            ImageUrl = "https://example.com/images/student1.jpg"
                        },
                        new
                        {
                            UserId = 7,
                            Address = "303 Student Avenue",
                            Bio = "Student interested in UI/UX and mobile apps.",
                            FullName = "Sophia Le",
                            ImageUrl = "https://example.com/images/student2.jpg"
                        },
                        new
                        {
                            UserId = 8,
                            Address = "404 Study Blvd",
                            Bio = "Student exploring cloud infrastructure and databases.",
                            FullName = "William Pham",
                            ImageUrl = "https://example.com/images/student3.jpg"
                        },
                        new
                        {
                            UserId = 9,
                            Address = "505 Academy Street",
                            Bio = "Student specializing in Android and Flutter.",
                            FullName = "Olivia Tran",
                            ImageUrl = "https://example.com/images/student4.jpg"
                        },
                        new
                        {
                            UserId = 10,
                            Address = "606 Education Drive",
                            Bio = "Student passionate about AI and machine learning.",
                            FullName = "David Vo",
                            ImageUrl = "https://example.com/images/student5.jpg"
                        });
                });

            modelBuilder.Entity("EduCore.BackEnd.Domain.Instructor", b =>
                {
                    b.Property<int>("UserProfileId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifierId")
                        .HasColumnType("int");

                    b.Property<string>("Qualifications")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Specializations")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("YearsOfExperience")
                        .HasColumnType("int");

                    b.HasKey("UserProfileId")
                        .HasName("PK_Instructors_UserProfileId");

                    b.ToTable("Instructors", "user");

                    b.HasData(
                        new
                        {
                            UserProfileId = 2,
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 145, DateTimeKind.Utc).AddTicks(4494),
                            CreatorId = 0,
                            Qualifications = "B.Sc. in Computer Science, Certified Web Accessibility Specialist",
                            RowVersion = new byte[] { 0 },
                            Specializations = "HTML, CSS, JavaScript, UI/UX",
                            Website = "https://frontendmentor.dev",
                            YearsOfExperience = 6
                        },
                        new
                        {
                            UserProfileId = 3,
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 145, DateTimeKind.Utc).AddTicks(4499),
                            CreatorId = 0,
                            Qualifications = "M.Sc. in Software Engineering, React Certification",
                            RowVersion = new byte[] { 0 },
                            Specializations = "React, Redux, TypeScript, Next.js",
                            Website = "https://reactwizard.io",
                            YearsOfExperience = 5
                        },
                        new
                        {
                            UserProfileId = 4,
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 145, DateTimeKind.Utc).AddTicks(4500),
                            CreatorId = 0,
                            Qualifications = "PhD in Artificial Intelligence",
                            RowVersion = new byte[] { 0 },
                            Specializations = "Machine Learning, NLP, Python, TensorFlow",
                            Website = "https://datasciencelab.ai",
                            YearsOfExperience = 8
                        },
                        new
                        {
                            UserProfileId = 5,
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 145, DateTimeKind.Utc).AddTicks(4501),
                            CreatorId = 0,
                            Qualifications = "AWS Certified DevOps Engineer, Full Stack Bootcamp Graduate",
                            RowVersion = new byte[] { 0 },
                            Specializations = "Node.js, Docker, AWS, MongoDB",
                            Website = "https://devopsfullstack.pro",
                            YearsOfExperience = 7
                        });
                });

            modelBuilder.Entity("EduCore.BackEnd.Infrastructure.Authentication.UserIdentity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("UserIdentities", "identity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8353f365-82f9-4e05-bdb1-42e058716990",
                            Email = "admin@eduplatform.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EDUPLATFORM.COM",
                            NormalizedUserName = "ADMIN",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "A1",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b90cb2f5-cb07-4a4a-8ebc-00735dce4c0b",
                            Email = "john@eduplatform.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHN@EDUPLATFORM.COM",
                            NormalizedUserName = "INSTRUCTOR.JOHN",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "A2",
                            TwoFactorEnabled = false,
                            UserName = "instructor.john"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "341288a8-f0e4-4b7f-8572-17e073c00ef6",
                            Email = "jane@eduplatform.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JANE@EDUPLATFORM.COM",
                            NormalizedUserName = "INSTRUCTOR.JANE",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "A3",
                            TwoFactorEnabled = false,
                            UserName = "instructor.jane"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9a48c97b-a4c5-4342-a3dd-a5762eb079d9",
                            Email = "mike@eduplatform.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MIKE@EDUPLATFORM.COM",
                            NormalizedUserName = "INSTRUCTOR.MIKE",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "A4",
                            TwoFactorEnabled = false,
                            UserName = "instructor.mike"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a066a393-cdee-4515-bb05-7f523066d910",
                            Email = "emily@eduplatform.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "EMILY@EDUPLATFORM.COM",
                            NormalizedUserName = "INSTRUCTOR.EMILY",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "A5",
                            TwoFactorEnabled = false,
                            UserName = "instructor.emily"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "304452bc-1d8a-464f-836e-f938266e3fb4",
                            Email = "alex@eduplatform.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALEX@EDUPLATFORM.COM",
                            NormalizedUserName = "STUDENT.ALEX",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "A6",
                            TwoFactorEnabled = false,
                            UserName = "student.alex"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2c1a8641-73cb-402d-a481-b5f1aee62f2a",
                            Email = "sophia@eduplatform.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SOPHIA@EDUPLATFORM.COM",
                            NormalizedUserName = "STUDENT.SOPHIA",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "A7",
                            TwoFactorEnabled = false,
                            UserName = "student.sophia"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e7dc7f13-f3f7-4944-9fbe-7eec5bbd62ba",
                            Email = "william@eduplatform.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "WILLIAM@EDUPLATFORM.COM",
                            NormalizedUserName = "STUDENT.WILLIAM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "A8",
                            TwoFactorEnabled = false,
                            UserName = "student.william"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "17ab8c9f-79d2-4698-a028-b25f2fedb32a",
                            Email = "olivia@eduplatform.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OLIVIA@EDUPLATFORM.COM",
                            NormalizedUserName = "STUDENT.OLIVIA",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "A9",
                            TwoFactorEnabled = false,
                            UserName = "student.olivia"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d7d00c88-a369-4e79-b94a-5f56ec5950c7",
                            Email = "david@eduplatform.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DAVID@EDUPLATFORM.COM",
                            NormalizedUserName = "STUDENT.DAVID",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "A10",
                            TwoFactorEnabled = false,
                            UserName = "student.david"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", "identity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Instructor",
                            NormalizedName = "INSTRUCTOR"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "identity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "Permission",
                            ClaimValue = "FullAccess",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "Permission",
                            ClaimValue = "ManageCourses",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "Permission",
                            ClaimValue = "EnrollCourses",
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "identity");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 7,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 8,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 9,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 10,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", "identity");
                });

            modelBuilder.Entity("EduCore.BackEnd.Domain.Entities.Assignment", b =>
                {
                    b.HasBaseType("EduCore.BackEnd.Domain.Entities.Exercise");

                    b.Property<bool>("AllowResubmission")
                        .HasColumnType("bit");

                    b.Property<string>("SubmissionInstruction")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasDiscriminator().HasValue("Assignment");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Description = "Submit an HTML page",
                            Discriminator = "Assignment",
                            DueDate = new DateTime(2024, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LectureId = 1,
                            MaxScore = 20f,
                            WeightPercentage = 40f,
                            AllowResubmission = true,
                            SubmissionInstruction = "Submit via portal"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Write HTML for a contact form",
                            Discriminator = "Assignment",
                            DueDate = new DateTime(2024, 7, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LectureId = 2,
                            MaxScore = 20f,
                            WeightPercentage = 70f,
                            AllowResubmission = false,
                            SubmissionInstruction = "Upload as .html file"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Box Model Layout Exercise",
                            Discriminator = "Assignment",
                            DueDate = new DateTime(2024, 7, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LectureId = 4,
                            MaxScore = 15f,
                            WeightPercentage = 50f,
                            AllowResubmission = true,
                            SubmissionInstruction = "Provide a CSS file"
                        });
                });

            modelBuilder.Entity("EduCore.BackEnd.Domain.Entities.Project", b =>
                {
                    b.HasBaseType("EduCore.BackEnd.Domain.Entities.Exercise");

                    b.Property<string>("GuidelineDocumentUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("SampleProjectUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasDiscriminator().HasValue("Project");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Description = "Build a static website",
                            Discriminator = "Project",
                            DueDate = new DateTime(2024, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LectureId = 1,
                            MaxScore = 30f,
                            WeightPercentage = 40f,
                            GuidelineDocumentUrl = "https://example.com/guideline.pdf",
                            SampleProjectUrl = "https://example.com/sample.zip"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Style a webpage using selectors",
                            Discriminator = "Project",
                            DueDate = new DateTime(2024, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LectureId = 3,
                            MaxScore = 30f,
                            WeightPercentage = 100f,
                            GuidelineDocumentUrl = "https://example.com/css_guideline.pdf",
                            SampleProjectUrl = "https://example.com/css_sample.zip"
                        });
                });

            modelBuilder.Entity("EduCore.BackEnd.Domain.Entities.Quiz", b =>
                {
                    b.HasBaseType("EduCore.BackEnd.Domain.Entities.Exercise");

                    b.HasDiscriminator().HasValue("Quiz");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Quiz for HTML Basics",
                            Discriminator = "Quiz",
                            DueDate = new DateTime(2024, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LectureId = 1,
                            MaxScore = 10f,
                            WeightPercentage = 20f
                        },
                        new
                        {
                            Id = 4,
                            Description = "Quiz on Basic HTML Tags",
                            Discriminator = "Quiz",
                            DueDate = new DateTime(2024, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LectureId = 2,
                            MaxScore = 10f,
                            WeightPercentage = 30f
                        },
                        new
                        {
                            Id = 7,
                            Description = "Quiz on CSS Box Model",
                            Discriminator = "Quiz",
                            DueDate = new DateTime(2024, 7, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LectureId = 4,
                            MaxScore = 15f,
                            WeightPercentage = 50f
                        });
                });

            modelBuilder.Entity("EduCore.BackEnd.Domain.Entities.StudentPayment", b =>
                {
                    b.HasBaseType("EduCore.BackEnd.Domain.Entities.Payment");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("EnrollmentId")
                        .HasColumnType("int");

                    b.Property<int?>("UserProfileUserId")
                        .HasColumnType("int");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserProfileUserId");

                    b.HasIndex(new[] { "EnrollmentId" }, "IX_StudentPayments_EnrollmentId")
                        .IsUnique()
                        .HasFilter("[EnrollmentId] IS NOT NULL");

                    b.HasDiscriminator().HasValue("StudentPayment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 499000m,
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 151, DateTimeKind.Utc).AddTicks(6245),
                            CreatorId = 0,
                            Discriminator = "StudentPayment",
                            PaymentDate = new DateTime(2024, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = "CreditCard",
                            RowVersion = new byte[] { 0 },
                            Status = "Completed",
                            TransactionId = "TXN1001",
                            EnrollmentId = 1
                        },
                        new
                        {
                            Id = 2,
                            Amount = 699000m,
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 151, DateTimeKind.Utc).AddTicks(6255),
                            CreatorId = 0,
                            Discriminator = "StudentPayment",
                            PaymentDate = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = "PayPal",
                            RowVersion = new byte[] { 0 },
                            Status = "Completed",
                            TransactionId = "TXN1002",
                            EnrollmentId = 2
                        },
                        new
                        {
                            Id = 3,
                            Amount = 499000m,
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 151, DateTimeKind.Utc).AddTicks(6258),
                            CreatorId = 0,
                            Discriminator = "StudentPayment",
                            PaymentDate = new DateTime(2024, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = "CreditCard",
                            RowVersion = new byte[] { 0 },
                            Status = "Completed",
                            TransactionId = "TXN1003",
                            EnrollmentId = 3
                        },
                        new
                        {
                            Id = 4,
                            Amount = 699000m,
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 151, DateTimeKind.Utc).AddTicks(6260),
                            CreatorId = 0,
                            Discriminator = "StudentPayment",
                            PaymentDate = new DateTime(2024, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = "PayPal",
                            RowVersion = new byte[] { 0 },
                            Status = "Completed",
                            TransactionId = "TXN1004",
                            EnrollmentId = 4
                        });
                });

            modelBuilder.Entity("EduCore.BackEnd.Domain.Entities.SystemPayment", b =>
                {
                    b.HasBaseType("EduCore.BackEnd.Domain.Entities.Payment");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("InstructorProfileId")
                        .HasColumnType("int");

                    b.HasIndex("CourseId");

                    b.HasIndex("InstructorProfileId");

                    b.ToTable("Payments", "payment", t =>
                        {
                            t.Property("CourseId")
                                .HasColumnName("SystemPayment_CourseId");
                        });

                    b.HasDiscriminator().HasValue("SystemPayment");

                    b.HasData(
                        new
                        {
                            Id = 5,
                            Amount = 1500000m,
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 152, DateTimeKind.Utc).AddTicks(9394),
                            CreatorId = 0,
                            Discriminator = "SystemPayment",
                            PaymentDate = new DateTime(2024, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = "BankTransfer",
                            RowVersion = new byte[] { 0 },
                            Status = "Completed",
                            TransactionId = "SYS1001",
                            InstructorProfileId = 2
                        },
                        new
                        {
                            Id = 6,
                            Amount = 2000000m,
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 152, DateTimeKind.Utc).AddTicks(9400),
                            CreatorId = 0,
                            Discriminator = "SystemPayment",
                            PaymentDate = new DateTime(2024, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = "BankTransfer",
                            RowVersion = new byte[] { 0 },
                            Status = "Completed",
                            TransactionId = "SYS1002",
                            InstructorProfileId = 3
                        },
                        new
                        {
                            Id = 7,
                            Amount = 1700000m,
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 152, DateTimeKind.Utc).AddTicks(9402),
                            CreatorId = 0,
                            Discriminator = "SystemPayment",
                            PaymentDate = new DateTime(2024, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = "BankTransfer",
                            RowVersion = new byte[] { 0 },
                            Status = "Completed",
                            TransactionId = "SYS1003",
                            InstructorProfileId = 4
                        },
                        new
                        {
                            Id = 8,
                            Amount = 1800000m,
                            CreatedAt = new DateTime(2025, 7, 18, 8, 40, 36, 152, DateTimeKind.Utc).AddTicks(9404),
                            CreatorId = 0,
                            Discriminator = "SystemPayment",
                            PaymentDate = new DateTime(2024, 6, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = "BankTransfer",
                            RowVersion = new byte[] { 0 },
                            Status = "Completed",
                            TransactionId = "SYS1004",
                            InstructorProfileId = 5
                        });
                });

            modelBuilder.Entity("EduCore.BackEnd.Domain.Entities.Answer", b =>
                {
                    b.HasOne("EduCore.BackEnd.Domain.Entities.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Answers_Questions_Id");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("EduCore.BackEnd.Domain.Entities.Certificate", b =>
                {
                    b.HasOne("EduCore.BackEnd.Domain.Entities.Course", "Course")
                        .WithOne("Certificate")
                        .HasForeignKey("EduCore.BackEnd.Domain.Entities.Certificate", "CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Certificates_Courses_Id");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("EduCore.BackEnd.Domain.Entities.Comment", b =>
                {
                    b.HasOne("EduCore.BackEnd.Domain.Entities.UserProfile", "CreatorProfile")
                        .WithMany("Comments")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Comments_Profiles_AccountId");

                    b.HasOne("EduCore.BackEnd.Domain.Entities.Lecture", "Lecture")
                        .WithMany("Comments")
                        .HasForeignKey("LectureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Comments_Lectures_Id");

                    b.HasOne("EduCore.BackEnd.Domain.Entities.Comment", "ParentComment")
                        .WithMany("Replies")
                        .HasForeignKey("ParentCommentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_Comments_Comments_Id");

                    b.Navigation("CreatorProfile");

                    b.Navigation("Lecture");

                    b.Navigation("ParentComment");
                });

            modelBuilder.Entity("EduCore.BackEnd.Domain.Entities.ContentBlock", b =>
                {
                    b.HasOne("EduCore.BackEnd.Domain.Entities.Lecture", "Lecture")
                        .WithMany("ContentBlocks")
                        .HasForeignKey("LectureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("PK_ContentBlocks_LectureId");

                    b.Navigation("Lecture");
                });

            modelBuilder.Entity("EduCore.BackEnd.Domain.Entities.Course", b =>
                {
                    b.HasOne("EduCore.BackEnd.Domain.Entities.UserProfile", "InstructorProfile")
                        .WithMany("InstructorCourses")
                        .HasForeignKey("InstructorProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Courses_Profiles_AccountId");

                    b.HasOne("EduCore.BackEnd.Domain.Entities.SubCategory", "SubCategory")
                        .WithMany("Courses")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Courses_SubCategories_Id");

                    b.Navigation("InstructorProfile");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("EduCore.BackEnd.Domain.Entities.Enrollment", b =>
                {
                    b.HasOne("EduCore.BackEnd.Domain.Entities.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Enrollmens_Courses_Id");

                    b.HasOne("EduCore.BackEnd.Domain.Entities.UserProfile", "StudentProfile")
                        .WithMany("StudentEnrollments")
                        .HasForeignKey("StudentProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Enrollmens_UserProfiles_UserId");

                    b.Navigation("Course");

                    b.Navigation("StudentProfile");
                });

            modelBuilder.Entity("EduCore.BackEnd.Domain.Entities.Exercise", b =>
                {
                    b.HasOne("EduCore.BackEnd.Domain.Entities.Lecture", "Lecture")
                        .WithMany("Exercises")
                        .HasForeignKey("LectureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Exercises_Lectures_Id");

                    b.Navigation("Lecture");
                });

            modelBuilder.Entity("EduCore.BackEnd.Domain.Entities.Lecture", b =>
                {
                    b.HasOne("EduCore.BackEnd.Domain.Entities.Section", "Section")
                        .WithMany("Lectures")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Lectures_Sections_Id");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("EduCore.BackEnd.Domain.Entities.Question", b =>
                {
                    b.HasOne("EduCore.BackEnd.Domain.Entities.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("EduCore.BackEnd.Domain.Entities.Review", b =>
                {
                    b.HasOne("EduCore.BackEnd.Domain.Entities.Enrollment", "Enrollment")
                        .WithOne("Review")
                        .HasForeignKey("EduCore.BackEnd.Domain.Entities.Review", "EnrollmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Reviews_Enrollments_EnrollmentId");

                    b.Navigation("Enrollment");
                });

            modelBuilder.Entity("EduCore.BackEnd.Domain.Entities.Sale", b =>
                {
                    b.HasOne("EduCore.BackEnd.Domain.Entities.Course", "Course")
                        .WithMany("Sales")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("EduCore.BackEnd.Domain.Entities.Section", b =>
                {
                    b.HasOne("EduCore.BackEnd.Domain.Entities.Course", "Course")
                        .WithMany("Sections")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Sections_Courses_Id");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("EduCore.BackEnd.Domain.Entities.Setting", b =>
                {
                    b.HasOne("EduCore.BackEnd.Domain.Entities.UserProfile", "UserProfile")
                        .WithMany("Settings")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Settings_UserProfiles_UserId");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("EduCore.BackEnd.Domain.Entities.Student", b =>
                {
                    b.HasOne("EduCore.BackEnd.Domain.Entities.UserProfile", "UserProfile")
                        .WithOne("Student")
                        .HasForeignKey("EduCore.BackEnd.Domain.Entities.Student", "UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Students_UserProfiles_UserId");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("EduCore.BackEnd.Domain.Entities.StudentCourse", b =>
                {
                    b.HasOne("EduCore.BackEnd.Domain.Entities.Course", "Course")
                        .WithMany("StudentCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_StudentCourses_Courses_Id");

                    b.HasOne("EduCore.BackEnd.Domain.Entities.UserProfile", "StudentProfile")
                        .WithMany("StudentCourses")
                        .HasForeignKey("StudentProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_StudentCourses_UserProfiles_UserId");

                    b.Navigation("Course");

                    b.Navigation("StudentProfile");
                });

            modelBuilder.Entity("EduCore.BackEnd.Domain.Entities.SubCategory", b =>
                {
                    b.HasOne("EduCore.BackEnd.Domain.Entities.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_SubCategories_CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("EduCore.BackEnd.Domain.Entities.Submission", b =>
                {
                    b.HasOne("EduCore.BackEnd.Domain.Entities.Exercise", "Exercise")
                        .WithMany("Submissions")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Submissions_Exercises_Id");

                    b.HasOne("EduCore.BackEnd.Domain.Entities.UserProfile", "StudentProfile")
                        .WithMany("StudentSubmissions")
                        .HasForeignKey("StudentProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Submissions_Profiles_AccountId");

                    b.Navigation("Exercise");

                    b.Navigation("StudentProfile");
                });

            modelBuilder.Entity("EduCore.BackEnd.Domain.Entities.UserProfile", b =>
                {
                    b.HasOne("EduCore.BackEnd.Infrastructure.Authentication.UserIdentity", null)
                        .WithOne("UserProfile")
                        .HasForeignKey("EduCore.BackEnd.Domain.Entities.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserProfiles_UserIdentities_Id");
                });

            modelBuilder.Entity("EduCore.BackEnd.Domain.Instructor", b =>
                {
                    b.HasOne("EduCore.BackEnd.Domain.Entities.UserProfile", "UserProfile")
                        .WithOne("Instructor")
                        .HasForeignKey("EduCore.BackEnd.Domain.Instructor", "UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Instructors_Profiles_AccountId");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("EduCore.BackEnd.Infrastructure.Authentication.UserIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("EduCore.BackEnd.Infrastructure.Authentication.UserIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduCore.BackEnd.Infrastructure.Authentication.UserIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("EduCore.BackEnd.Infrastructure.Authentication.UserIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EduCore.BackEnd.Domain.Entities.StudentPayment", b =>
                {
                    b.HasOne("EduCore.BackEnd.Domain.Entities.Course", null)
                        .WithMany("StudentCheckouts")
                        .HasForeignKey("CourseId");

                    b.HasOne("EduCore.BackEnd.Domain.Entities.Enrollment", "Enrollment")
                        .WithOne("Payment")
                        .HasForeignKey("EduCore.BackEnd.Domain.Entities.StudentPayment", "EnrollmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_StudentPayments_Enrollments_EnrollmentId");

                    b.HasOne("EduCore.BackEnd.Domain.Entities.UserProfile", null)
                        .WithMany("StudentCheckouts")
                        .HasForeignKey("UserProfileUserId");

                    b.Navigation("Enrollment");
                });

            modelBuilder.Entity("EduCore.BackEnd.Domain.Entities.SystemPayment", b =>
                {
                    b.HasOne("EduCore.BackEnd.Domain.Entities.Course", null)
                        .WithMany("SystemCheckouts")
                        .HasForeignKey("CourseId");

                    b.HasOne("EduCore.BackEnd.Domain.Entities.UserProfile", "InstructorProfile")
                        .WithMany("SystemCheckouts")
                        .HasForeignKey("InstructorProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_SystemPayments_Profiles_AccountId");

                    b.Navigation("InstructorProfile");
                });

            modelBuilder.Entity("EduCore.BackEnd.Domain.Entities.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("EduCore.BackEnd.Domain.Entities.Comment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("EduCore.BackEnd.Domain.Entities.Course", b =>
                {
                    b.Navigation("Certificate")
                        .IsRequired();

                    b.Navigation("Enrollments");

                    b.Navigation("Sales");

                    b.Navigation("Sections");

                    b.Navigation("StudentCheckouts");

                    b.Navigation("StudentCourses");

                    b.Navigation("SystemCheckouts");
                });

            modelBuilder.Entity("EduCore.BackEnd.Domain.Entities.Enrollment", b =>
                {
                    b.Navigation("Payment")
                        .IsRequired();

                    b.Navigation("Review");
                });

            modelBuilder.Entity("EduCore.BackEnd.Domain.Entities.Exercise", b =>
                {
                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("EduCore.BackEnd.Domain.Entities.Lecture", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("ContentBlocks");

                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("EduCore.BackEnd.Domain.Entities.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("EduCore.BackEnd.Domain.Entities.Section", b =>
                {
                    b.Navigation("Lectures");
                });

            modelBuilder.Entity("EduCore.BackEnd.Domain.Entities.SubCategory", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("EduCore.BackEnd.Domain.Entities.UserProfile", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Instructor")
                        .IsRequired();

                    b.Navigation("InstructorCourses");

                    b.Navigation("Settings");

                    b.Navigation("Student")
                        .IsRequired();

                    b.Navigation("StudentCheckouts");

                    b.Navigation("StudentCourses");

                    b.Navigation("StudentEnrollments");

                    b.Navigation("StudentSubmissions");

                    b.Navigation("SystemCheckouts");
                });

            modelBuilder.Entity("EduCore.BackEnd.Infrastructure.Authentication.UserIdentity", b =>
                {
                    b.Navigation("UserProfile")
                        .IsRequired();
                });

            modelBuilder.Entity("EduCore.BackEnd.Domain.Entities.Quiz", b =>
                {
                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
